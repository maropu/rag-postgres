This example is that an original document is split into 5 parts: chunk size is 1000 and chunk overlap size is 200


===== Original Doc =====


5.2. 報告すべきこと      
 
バグ報告で最も重要なことは、全ての事実を、そして事実のみを明確に記述することです。
何が起こったのか、または、プログラムのどこが問題か、 「 何々が起こっているようだ 」 などの憶測や推測を記述しないでください。
実装にさほど詳しくない方の推測は正しくない場合があり、有効なバグ報告になりません。
実装に精通している方の場合であっても、根拠のある説明は参考情報となりますが、やはり正しい事実が一番役に立ちます。
バグを修正するためには、まず開発者自身がそのバグを再現する必要があります。
ありのままの事実を報告することは、単刀直入（多くの場合は画面からメッセージをコピー&amp;ペーストを行うのみ）ですが、えてして、重要でないだろうと想像したり、省いても理解してもらえるだろうという思い込みによって、重要な情報がもれてしまう場合がかなり多くあります。
    
 
全てのバグ報告では、下記の内容が記述されていなければいけません。

        
 
問題を再現できるように、  プログラムの起動から  行った作業を順序通りに記述してください。
例えば、出力がテーブルのデータに依存するならば、単に SELECT 文を記述していても、それ以前に行われた、 CREATE TABLE や INSERT 文が記述されていなければ十分とはいえません。
我々は、ユーザのデータベーススキーマをリバースエンジニアリングするための時間を取ることができませんし、推測してデータを構築したとしても、おそらく間違えることになるでしょう。
       
 
SQL関連の問題のテストケースの最適な書式は、 psql フロントエンドに直接読み込ませて問題を再現できるファイルを用意することです
（ ~/.psqlrc の起動ファイルに何も書かれていないことを確認してください）。
このファイルを簡単に作成するには、 pg_dump を使ってテーブル定義とその状況を再現させるために必要なデータを取り出し、問題の起こった問い合わせを追加します。
サンプルデータの量を減らすことは、推奨されますが必ずしも必要ではありません。
どのような方法であれ、バグが再現できればよいのです。
       
 
アプリケーションが PHP など何か別のクライアントインタフェースを使用している場合、問題となる問い合わせを切り出してください。
問題を再現させるために我々がWebサーバをセットアップすることは、おそらくないでしょう。
どのような場合においても、正確な入力ファイルを提供することを忘れないでください。
 「 大規模ファイル 」 や 「 中規模データベース 」 で発生する問題である、といった推測は行わないでください。
こうした情報は不正確過ぎて役に立ちません。
         
 
得られた出力そのもの。
 「 うまくいかなかった 」 、あるいは 「 クラッシュした 」 といった報告はしないでください。
エラーメッセージがあるならば、たとえ意味が理解できなくてもそれを報告してください。
オペレーティングシステムのエラーでプログラムが強制終了してしまったら、どのエラーでそうなったのかを報告してください。
何も起こらない場合も、その旨を報告してください。
たとえテストケースの結果がプログラムのクラッシュなど明確な場合でも、我々のプラットフォームで再現できない場合があります。
最も容易な方法は、出力をターミナルからコピーすることです。
        注記  
 
エラーメッセージを報告する場合、そのメッセージを最大限詳細に取得してください。
 psql では、前もって \set VERBOSITY verbose を指定してください。
サーバログからメッセージを取りだす場合は、全ての詳細をログに取得できるように log_error_verbosity 実行時パラメータを verbose に設定してください。
          注記  
 
致命的なエラーが起こった場合、クライアント側で報告されるエラーメッセージには得られる情報が全て書かれているとは限りません。
データベースサーバのログも見てみてください。
もしログを取っていないならば、取る習慣を付けるいいタイミングです。
           
 
どのような出力を望んでいたのかを記述することも非常に重要です。
ただ単に 「 このコマンドはこのような出力を返した 」 や、 「 期待していた結果ではない 」 だけでは、再現して結果を検証した際、開発者は、これは期待した通りの正しい結果である、と考えるかもしれません。
送られてきたコマンドの背後にある文脈を全て把握することはできません。
また、特に 「 SQLではこう書かれていない/Oracleではこのようにならない 」 というコメントはご遠慮願います。
 SQL の正確な動作を探し出すのは楽しい作業ではありませんし、また、世にある他のリレーショナルデータベースの動作全てをPostgreSQLの開発者が把握しているわけでもありません
（問題がプログラムのクラッシュである場合、この内容は言うまでもなく省略できます）。
         
 
すべてのコマンドラインオプションと起動時のオプション、デフォルトから変更した関連する環境変数や設定ファイル。
ここでも、正確な情報を提供してください。
OSの起動時にデータベースサーバを起動するようにパッケージされたディストリビューションを使用している場合は、それらがどのように実行されているかを確認する必要があります。
         
 
インストールの手順書から変更して実行したすべての内容。
         
 
 PostgreSQL のバージョン。
 SELECT version(); で、接続しているサーバのバージョンがわかります。
多くの実行可能なプログラムでは --version オプションも使用できます。
少なくとも postgres --version と psql --version は実行できるはずです。
これらの関数やオプションが使用できない場合、アップグレードが保証されているものよりも、さらに古いバージョンです。
RPMなどパッケージ化されたものを使用している場合は、その旨を連絡し、パッケージに付加されたバージョン番号があれば、それも記載してください。
Git版に対するバグ報告の場合は、その旨も記載し、コミットハッシュの情報も含めてください。
       
 
15.4よりもバージョンが古い場合、アップグレードすることをお勧めします。
新しいリリースでは多くのバグ修正や改良がなされているからです。
ですので、古めの PostgreSQL のリリースを使用していて遭遇した不具合が修正されている可能性がかなりあります。
古い PostgreSQL のリリースを使用しているサイトに対して、我々は限定されたサポートしか提供することができません。
それ以上のサポートが必要であれば、商用サポート契約を結ぶことを検討してください。
       
    
 
プラットフォーム情報。
カーネル名とバージョン、Cライブラリ、プロセッサ、メモリ情報なども含めて報告してください。
多くの場合、ベンダ名とそのバージョンを明記するだけで十分ですが、 「 Debian 」 の正確な構成要素を全ての人間が把握している、であるとか、全ての人間がx86_64を使用しているなどの思い込みは止めてください。
インストールに関する問題の場合は、マシンのツール群（コンパイラや make など）の情報も必要となります。
          
 
バグ報告が長文になってもそれは仕方がないことなので、気にしないでください。
最初に全ての情報を入手できる方が、開発者が事実を聞き出さなければいけない状況よりも良いです。
その一方、ファイルが大きいならば、その情報に誰か興味があるかを最初に尋ねるのが得策かもしれません。
 記事 には、バグ報告に関するその他のコツの概要があります。
    
 
問題を解決する入力を見つけ出すための試行錯誤に時間をかけないでください。
これはおそらく問題解決の助けになりません。
バグが即座に修正されない場合、その時間を利用すれば、あなた自身のワークアラウンドを探して共有できます。
繰り返しになりますが、バグがなぜあるのかを解明するのに余計な時間をかける必要はありません。
開発者の方が十分速くそれを見つけ出します。
    
 
バグ報告をする際、理解しやすい用語を使用してください。
このソフトウェアパッケージ全体は 「 PostgreSQL 」 と呼ばれていますが、略して 「 Postgres 」 とも呼ばれます。
特にバックエンドプロセスに関して述べる時は、そのように明記し、 「 PostgreSQLがクラッシュする 」 とは記述しないでください。
1つのバックエンドプロセスのクラッシュと、その親プロセス 「 postgres 」 のクラッシュとはかなり異なります。
1つのバックエンドがダウンしてしまったことを、 「 サーバがクラッシュした 」 とは記述しないでください。
その逆の場合にも当てはまります。
また、 「  psql  」 対話式フロントエンドなどのクライアントプログラムはバックエンドとは完全に分離されています。
問題がクライアント側かサーバ側かの切り分けを試みてください。


=====  Split Doc Part 1 =====


# ref: bug-reporting.html
# titles: PostgreSQL 15.4文書/5. バグレポートガイドライン/5.2. 報告すべきこと/注記/注記

5.2. 報告すべきこと      
 
バグ報告で最も重要なことは、全ての事実を、そして事実のみを明確に記述することです。
何が起こったのか、または、プログラムのどこが問題か、 「 何々が起こっているようだ 」 などの憶測や推測を記述しないでください。
実装にさほど詳しくない方の推測は正しくない場合があり、有効なバグ報告になりません。
実装に精通している方の場合であっても、根拠のある説明は参考情報となりますが、やはり正しい事実が一番役に立ちます。
バグを修正するためには、まず開発者自身がそのバグを再現する必要があります。
ありのままの事実を報告することは、単刀直入（多くの場合は画面からメッセージをコピー&amp;ペーストを行うのみ）ですが、えてして、重要でないだろうと想像したり、省いても理解してもらえるだろうという思い込みによって、重要な情報がもれてしまう場合がかなり多くあります。
    
 
全てのバグ報告では、下記の内容が記述されていなければいけません。
        
 
問題を再現できるように、  プログラムの起動から  行った作業を順序通りに記述してください。
例えば、出力がテーブルのデータに依存するならば、単に SELECT 文を記述していても、それ以前に行われた、 CREATE TABLE や INSERT 文が記述されていなければ十分とはいえません。
我々は、ユーザのデータベーススキーマをリバースエンジニアリングするための時間を取ることができませんし、推測してデータを構築したとしても、おそらく間違えることになるでしょう。
       
 
SQL関連の問題のテストケースの最適な書式は、 psql フロントエンドに直接読み込ませて問題を再現できるファイルを用意することです
（ ~/.psqlrc の起動ファイルに何も書かれていないことを確認してください）。
このファイルを簡単に作成するには、 pg_dump を使ってテーブル定義とその状況を再現させるために必要なデータを取り出し、問題の起こった問い合わせを追加します。
サンプルデータの量を減らすことは、推奨されますが必ずしも必要ではありません。
どのような方法であれ、バグが再現できればよいのです。


=====  Split Doc Part 2 =====


# ref: bug-reporting.html
# titles: PostgreSQL 15.4文書/5. バグレポートガイドライン/5.2. 報告すべきこと/注記/注記

（ ~/.psqlrc の起動ファイルに何も書かれていないことを確認してください）。
このファイルを簡単に作成するには、 pg_dump を使ってテーブル定義とその状況を再現させるために必要なデータを取り出し、問題の起こった問い合わせを追加します。
サンプルデータの量を減らすことは、推奨されますが必ずしも必要ではありません。
どのような方法であれ、バグが再現できればよいのです。
       
 
アプリケーションが PHP など何か別のクライアントインタフェースを使用している場合、問題となる問い合わせを切り出してください。
問題を再現させるために我々がWebサーバをセットアップすることは、おそらくないでしょう。
どのような場合においても、正確な入力ファイルを提供することを忘れないでください。
 「 大規模ファイル 」 や 「 中規模データベース 」 で発生する問題である、といった推測は行わないでください。
こうした情報は不正確過ぎて役に立ちません。
         
 
得られた出力そのもの。
 「 うまくいかなかった 」 、あるいは 「 クラッシュした 」 といった報告はしないでください。
エラーメッセージがあるならば、たとえ意味が理解できなくてもそれを報告してください。
オペレーティングシステムのエラーでプログラムが強制終了してしまったら、どのエラーでそうなったのかを報告してください。
何も起こらない場合も、その旨を報告してください。
たとえテストケースの結果がプログラムのクラッシュなど明確な場合でも、我々のプラットフォームで再現できない場合があります。
最も容易な方法は、出力をターミナルからコピーすることです。
        注記  
 
エラーメッセージを報告する場合、そのメッセージを最大限詳細に取得してください。
 psql では、前もって \set VERBOSITY verbose を指定してください。
サーバログからメッセージを取りだす場合は、全ての詳細をログに取得できるように log_error_verbosity 実行時パラメータを verbose に設定してください。
          注記  
 
致命的なエラーが起こった場合、クライアント側で報告されるエラーメッセージには得られる情報が全て書かれているとは限りません。


=====  Split Doc Part 3 =====


# ref: bug-reporting.html
# titles: PostgreSQL 15.4文書/5. バグレポートガイドライン/5.2. 報告すべきこと/注記/注記

サーバログからメッセージを取りだす場合は、全ての詳細をログに取得できるように log_error_verbosity 実行時パラメータを verbose に設定してください。
          注記  
 
致命的なエラーが起こった場合、クライアント側で報告されるエラーメッセージには得られる情報が全て書かれているとは限りません。
データベースサーバのログも見てみてください。
もしログを取っていないならば、取る習慣を付けるいいタイミングです。
           
 
どのような出力を望んでいたのかを記述することも非常に重要です。
ただ単に 「 このコマンドはこのような出力を返した 」 や、 「 期待していた結果ではない 」 だけでは、再現して結果を検証した際、開発者は、これは期待した通りの正しい結果である、と考えるかもしれません。
送られてきたコマンドの背後にある文脈を全て把握することはできません。
また、特に 「 SQLではこう書かれていない/Oracleではこのようにならない 」 というコメントはご遠慮願います。
 SQL の正確な動作を探し出すのは楽しい作業ではありませんし、また、世にある他のリレーショナルデータベースの動作全てをPostgreSQLの開発者が把握しているわけでもありません
（問題がプログラムのクラッシュである場合、この内容は言うまでもなく省略できます）。
         
 
すべてのコマンドラインオプションと起動時のオプション、デフォルトから変更した関連する環境変数や設定ファイル。
ここでも、正確な情報を提供してください。
OSの起動時にデータベースサーバを起動するようにパッケージされたディストリビューションを使用している場合は、それらがどのように実行されているかを確認する必要があります。
         
 
インストールの手順書から変更して実行したすべての内容。
         
 
 PostgreSQL のバージョン。
 SELECT version(); で、接続しているサーバのバージョンがわかります。
多くの実行可能なプログラムでは --version オプションも使用できます。
少なくとも postgres --version と psql --version は実行できるはずです。


=====  Split Doc Part 4 =====


# ref: bug-reporting.html
# titles: PostgreSQL 15.4文書/5. バグレポートガイドライン/5.2. 報告すべきこと/注記/注記

インストールの手順書から変更して実行したすべての内容。
         
 
 PostgreSQL のバージョン。
 SELECT version(); で、接続しているサーバのバージョンがわかります。
多くの実行可能なプログラムでは --version オプションも使用できます。
少なくとも postgres --version と psql --version は実行できるはずです。
これらの関数やオプションが使用できない場合、アップグレードが保証されているものよりも、さらに古いバージョンです。
RPMなどパッケージ化されたものを使用している場合は、その旨を連絡し、パッケージに付加されたバージョン番号があれば、それも記載してください。
Git版に対するバグ報告の場合は、その旨も記載し、コミットハッシュの情報も含めてください。
       
 
15.4よりもバージョンが古い場合、アップグレードすることをお勧めします。
新しいリリースでは多くのバグ修正や改良がなされているからです。
ですので、古めの PostgreSQL のリリースを使用していて遭遇した不具合が修正されている可能性がかなりあります。
古い PostgreSQL のリリースを使用しているサイトに対して、我々は限定されたサポートしか提供することができません。
それ以上のサポートが必要であれば、商用サポート契約を結ぶことを検討してください。
       
    
 
プラットフォーム情報。
カーネル名とバージョン、Cライブラリ、プロセッサ、メモリ情報なども含めて報告してください。
多くの場合、ベンダ名とそのバージョンを明記するだけで十分ですが、 「 Debian 」 の正確な構成要素を全ての人間が把握している、であるとか、全ての人間がx86_64を使用しているなどの思い込みは止めてください。
インストールに関する問題の場合は、マシンのツール群（コンパイラや make など）の情報も必要となります。
          
 
バグ報告が長文になってもそれは仕方がないことなので、気にしないでください。
最初に全ての情報を入手できる方が、開発者が事実を聞き出さなければいけない状況よりも良いです。
その一方、ファイルが大きいならば、その情報に誰か興味があるかを最初に尋ねるのが得策かもしれません。


=====  Split Doc Part 5 =====


# ref: bug-reporting.html
# titles: PostgreSQL 15.4文書/5. バグレポートガイドライン/5.2. 報告すべきこと/注記/注記

バグ報告が長文になってもそれは仕方がないことなので、気にしないでください。
最初に全ての情報を入手できる方が、開発者が事実を聞き出さなければいけない状況よりも良いです。
その一方、ファイルが大きいならば、その情報に誰か興味があるかを最初に尋ねるのが得策かもしれません。
 記事 には、バグ報告に関するその他のコツの概要があります。
    
 
問題を解決する入力を見つけ出すための試行錯誤に時間をかけないでください。
これはおそらく問題解決の助けになりません。
バグが即座に修正されない場合、その時間を利用すれば、あなた自身のワークアラウンドを探して共有できます。
繰り返しになりますが、バグがなぜあるのかを解明するのに余計な時間をかける必要はありません。
開発者の方が十分速くそれを見つけ出します。
    
 
バグ報告をする際、理解しやすい用語を使用してください。
このソフトウェアパッケージ全体は 「 PostgreSQL 」 と呼ばれていますが、略して 「 Postgres 」 とも呼ばれます。
特にバックエンドプロセスに関して述べる時は、そのように明記し、 「 PostgreSQLがクラッシュする 」 とは記述しないでください。
1つのバックエンドプロセスのクラッシュと、その親プロセス 「 postgres 」 のクラッシュとはかなり異なります。
1つのバックエンドがダウンしてしまったことを、 「 サーバがクラッシュした 」 とは記述しないでください。
その逆の場合にも当てはまります。
また、 「  psql  」 対話式フロントエンドなどのクライアントプログラムはバックエンドとは完全に分離されています。
問題がクライアント側かサーバ側かの切り分けを試みてください。
